// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Generators.Sync.Utility
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class UnpackEntityUtilityGenerator : UnpackEntityUtilityGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System.Text;
using NetStack.Serialization;
using Sources.Tools;

public static class UnpackEntityUtility
{
    public static void CreateEntities(GameContext game, BitBuffer buffer, ushort entityCount)
    {
        for (int i = 0; i < entityCount; i++)
        {
		    var addedComponents = new StringBuilder(128);

            var e = game.CreateEntity();

            var componentsCount = buffer.ReadUShort();

            for (int j = 0; j < componentsCount; j++)
            {
                var componentId = buffer.ReadUShort();

                switch (componentId)
                {
");
            
            #line 27 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

for (int i = 0; i < ComponentNames.Length; i++)
{
    var id = ComponentIds[i];
    var fullName = ComponentNames[i];
    var name = ComponentNames[i].Replace("Component", "");
    var isTag = IsTags[i];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 35 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(id));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    addedComponents.Append(\" ");
            
            #line 37 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" \");\r\n");
            
            #line 38 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

if (isTag)
{

            
            #line default
            #line hidden
            this.Write("                        e.is");
            
            #line 42 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = true;\r\n");
            
            #line 43 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("                        var lookup = GameComponentsLookup.");
            
            #line 48 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t\t\tvar comp = e.CreateComponent<");
            
            #line 49 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fullName));
            
            #line default
            #line hidden
            this.Write(">(lookup);\r\n\t\t\t\t\t\tcomp.Deserialize(buffer);\r\n\t\t\t\t\t\te.AddComponent(lookup, comp);\r" +
                    "\n");
            
            #line 52 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t}\r\n\t\t\t\t\t    break;\r\n");
            
            #line 57 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write(@"                }
            }
			Logger.I.Log(""UnpackEntityUtility"", $"" Entity-{e.id.Value}: created - ({addedComponents})"");
        }
    }
	
	public static void ChangeComponents(GameContext game, BitBuffer buffer, ushort componentCount)
	{
		for (int i = 0; i < componentCount; i++)
		{
			var entityId    = buffer.ReadUShort();
			var componentId = buffer.ReadUShort();
			var e           = game.GetEntityWithId(entityId);

			switch (componentId)
			{
");
            
            #line 76 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

for (int i = 0; i < ComponentNames.Length; i++)
{
    var id = ComponentIds[i];
    var fullName = ComponentNames[i];
    var name = ComponentNames[i].Replace("Component", "");
    var isTag = IsTags[i];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 84 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(id));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tLogger.I.Log(\"UnpackEntityUtility\", $\" Entity-{entityId}: Change" +
                    "d ");
            
            #line 86 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" component\");\r\n");
            
            #line 87 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

if (isTag)
{

            
            #line default
            #line hidden
            this.Write("                        e.is");
            
            #line 91 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = true;\r\n");
            
            #line 92 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("                        var lookup = GameComponentsLookup.");
            
            #line 97 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t\t\tvar comp = e.CreateComponent<");
            
            #line 98 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fullName));
            
            #line default
            #line hidden
            this.Write(">(lookup);\r\n\t\t\t\t        comp.Deserialize(buffer);\r\n\t\t\t\t        e.ReplaceComponent" +
                    "(lookup, comp);\r\n");
            
            #line 101 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t}\r\n\t\t\t\t\t    break;\r\n");
            
            #line 106 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write(@"			}
		}
	}
	
	public static void RemoveComponents(GameContext game, BitBuffer buffer, ushort componentCount)
	{
		for (int i = 0; i < componentCount; i++)
		{
			var entityId = buffer.ReadUShort();
			var componentId = buffer.ReadUShort();
			var e = game.GetEntityWithId(entityId);

			switch (componentId)
			{
");
            
            #line 123 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

for (int i = 0; i < ComponentNames.Length; i++)
{
    var id = ComponentIds[i];
    var name = ComponentNames[i].Replace("Component", "");
    var isTag = IsTags[i];

            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 130 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(id));
            
            #line default
            #line hidden
            this.Write(":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    Logger.I.Log(\"UnpackEntityUtility\", $\" Entity-{entityId}: Rem" +
                    "oved ");
            
            #line 132 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" component\");\r\n");
            
            #line 133 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

if (isTag)
{

            
            #line default
            #line hidden
            this.Write("                        e.is");
            
            #line 137 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = false;\r\n");
            
            #line 138 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("                        e.Remove");
            
            #line 143 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 144 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t}\r\n\t\t\t\t\t    break;\r\n");
            
            #line 149 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write(@"			}
		}
	}
	
	public static void RemoveEntities(GameContext game, BitBuffer buffer, ushort entityCount)
	{
		for (int i = 0; i < entityCount; i++)
		{
			var id = buffer.ReadUShort();
			var e = game.GetEntityWithId(id);
            e.isDestroyed = true;
			Logger.I.Log(""UnpackEntityUtility"", $"" Entity-{id}: is removed"");
		}
	}
}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\UnityProjects\Coop-JRPG\Generators\Generators\Generators\Sync\Utility\UnpackEntityUtilityGenerator.tt"

private string[] _ComponentNamesField;

/// <summary>
/// Access the ComponentNames parameter of the template.
/// </summary>
private string[] ComponentNames
{
    get
    {
        return this._ComponentNamesField;
    }
}

private ushort[] _ComponentIdsField;

/// <summary>
/// Access the ComponentIds parameter of the template.
/// </summary>
private ushort[] ComponentIds
{
    get
    {
        return this._ComponentIdsField;
    }
}

private bool[] _IsTagsField;

/// <summary>
/// Access the IsTags parameter of the template.
/// </summary>
private bool[] IsTags
{
    get
    {
        return this._IsTagsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ComponentNamesValueAcquired = false;
if (this.Session.ContainsKey("ComponentNames"))
{
    this._ComponentNamesField = ((string[])(this.Session["ComponentNames"]));
    ComponentNamesValueAcquired = true;
}
if ((ComponentNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ComponentNames");
    if ((data != null))
    {
        this._ComponentNamesField = ((string[])(data));
    }
}
bool ComponentIdsValueAcquired = false;
if (this.Session.ContainsKey("ComponentIds"))
{
    this._ComponentIdsField = ((ushort[])(this.Session["ComponentIds"]));
    ComponentIdsValueAcquired = true;
}
if ((ComponentIdsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ComponentIds");
    if ((data != null))
    {
        this._ComponentIdsField = ((ushort[])(data));
    }
}
bool IsTagsValueAcquired = false;
if (this.Session.ContainsKey("IsTags"))
{
    this._IsTagsField = ((bool[])(this.Session["IsTags"]));
    IsTagsValueAcquired = true;
}
if ((IsTagsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IsTags");
    if ((data != null))
    {
        this._IsTagsField = ((bool[])(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class UnpackEntityUtilityGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
